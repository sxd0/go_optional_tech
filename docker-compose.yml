services:
  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 5s
      timeout: 3s
      retries: 20

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ADDR: kafka:9092
      REDIS_ADDR: redis:6379

  topic-init:
    image: bitnami/kafka:3.7
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -lc '
        set -euo pipefail
        echo "[topic-init] waiting Kafka API..."
        for i in {1..60}; do
          if /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list >/dev/null 2>&1; then
            break
          fi
          echo "[topic-init] not ready yet ($i)"; sleep 1
        done;
        echo "[topic-init] creating topic if not exists..."
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic events --replication-factor 1 --partitions 1
        echo "[topic-init] topic events ready"
        tail -f /dev/null
      '
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --describe --topic events >/dev/null 2>&1"]
      interval: 2s
      timeout: 5s
      retries: 30
      start_period: 5s

  aggregator:
    build:
      context: .
      dockerfile: Dockerfile.aggregator
    depends_on:
      kafka:
        condition: service_healthy
      topic-init:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ADDR: kafka:9092
      REDIS_ADDR: redis:6379

  report:
    build:
      context: .
      dockerfile: Dockerfile.report
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_ADDR: redis:6379
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8081/health >/dev/null"]
      interval: 5s
      timeout: 3s
      retries: 20

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports: ["18090:8080"]
    depends_on:
      kafka:
        condition: service_healthy

networks:
  default:
    name: goopt_net
